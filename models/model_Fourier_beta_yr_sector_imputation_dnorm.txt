# JAGS model for imputing missing hatchling counts at Raine Island

# The known cyclical nature of hatching is modeled by the discrete 
# Fourier series of one period per year.  Hatchling production starts
# December 20 and ends April 30 each season.  Observed counts are 
# limited so they are used to determine amplitude of each season
# and for each sector.  Amplitudes for sectors are correlated.

# First, tried with mvnorm but jags does not allow partially missing observations
# in mvnorm. So, changing it to five separate normals but a common slope
# parameter

model{

  for (yr in 1:n.years){
    for (j in 1:n.sectors){
      # Initial states
      
      X0[yr, j] ~ dnorm(mu.X0[yr, j], 1.0)  #tau.X0[j])
      X[yr, j, 1] <- c[yr, j, day[1]] + X0[yr, j]  # day 1 should be 12/21

      #X[j,1] ~ dnorm(predX[j,1], 2.0)  # tau.X[j]

      # observation
      y[yr,j,1] ~  dnorm(X[yr,j,1], tau.y)

       for (t in 2:n.steps){
           # state
           X[yr,j,t] <-  c[yr, j, day[t]] + X[yr, j, t-1]
           #X[j, t] ~ dnorm(predX[j,t], 2.0)  #tau.X[j])

           # observation
           y[yr, j,t] ~ dnorm(X[yr,j,t], tau.y)
                
        }
    }
  }  
  # c parameter defined here with a discrete Fourier function
  # n.days = from 12/21 to 4/30. Provide it through jags.data
  # also provide period (should be same as n.days) through jags.data

  for (yr in 1:n.years){
    for (j in 1:n.sectors){
      for (t in 1:n.steps){
        
        c[yr, j, t] <- beta.cos[yr, j] * cos(2 * pi * t / period) + beta.sin[yr, j] * sin(2 * pi * t / period)
      }  
    }
  }
    
  # priors
  for (yr in 1:n.years){
    for (j in 1:n.sectors){
      beta.cos[yr, j] ~ dnorm(0, 1)
      beta.sin[yr, j] ~ dnorm(0, 1)

    }
  }
  
  sigma.y ~ dgamma(1, 0.1)
  tau.y <- 1/(sigma.y * sigma.y)

  #for (j in 1:n.sectors){
    # observation SD and precision - needs to be petty tight 
    # for convergence because data are so limited
    #sigma.y[j] ~ dgamma(1, 0.1)
    #tau.y[j] <- 1/(sigma.y[j] * sigma.y[j])

    # sigma.X is the SD of the process (X)
    #sigma.X[j] ~ dgamma(1, 0.1)
    #tau.X[j] <- 1/(sigma.X[j] * sigma.X[j])    
        
  #}
}
